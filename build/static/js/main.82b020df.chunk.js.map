{"version":3,"sources":["components/Navigation/index.js","utils/helpers.js","components/Header/index.js","components/Footer/index.js","components/Project/index.js","components/Contact/index.js","assets/cover/cover-img.png","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","directories","setCurrentDirectory","currentDirectory","contactSelected","setContactSelected","className","href","role","onClick","item","console","log","map","directory","name","string","charAt","toUpperCase","slice","Header","Footer","Project","ContactForm","useState","errorMessage","setErrorMessage","email","message","formState","setFormState","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","length","id","onSubmit","preventDefault","htmlFor","type","defaultValue","onBlur","rows","About","src","coverImage","style","width","alt","App","description","Contact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.82b020df.chunk.js","sourcesContent":["import React from \"react\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\n\nfunction Navigation(props) {\n  const {\n    directories = [],\n    setCurrentDirectory,\n    currentDirectory,\n    contactSelected,\n    setContactSelected,\n  } = props;\n\n  const handleClick = (item) => {\n    console.log(item);\n    return item;\n  };\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h2>\n        <a href=\"/\">\n          <span role=\"img\" aria-label=\"camera\">\n            {\" \"}\n            ðŸ“¸\n          </span>{\" \"}\n          Oh Snap!\n        </a>\n      </h2>\n      <nav>\n        <ul className=\"flex-row\">\n          <li className=\"mx-2\">\n            <a href=\"#about\" onClick={() => setContactSelected(false)}>\n              About me\n            </a>\n          </li>\n          <li className={`mx-2 ${contactSelected && \"navActive\"}`}>\n            <span\n              onClick={() => {\n                handleClick(\"Contact\");\n                setContactSelected(true);\n              }}\n            >\n              Contact\n            </span>\n          </li>\n          {directories.map((directory) => (\n            <li\n              className={`mx-1 ${\n                currentDirectory.name === directory.name &&\n                !contactSelected &&\n                `navActive`\n              }`}\n              key={directory.name}\n            >\n              <span\n                onClick={() => {\n                  setCurrentDirectory(directory);\n                  setContactSelected(false);\n                }}\n              >\n                {capitalizeFirstLetter(directory.name)}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Navigation;\n","export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function validateEmail(email) {\n  var re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n","import React from \"react\";\n\nfunction Header() {\n  return <p>This is the header</p>;\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <section>\n      <div>\n        <p>Footer working</p>\n      </div>\n    </section>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Project() {\n  return (\n    <section>\n      <h1>The Project component is working</h1>\n    </section>\n  );\n}\n\nexport default Project;\n","import React, { useState } from \"react\";\nimport { validateEmail } from \"../../utils/helpers\";\n\nfunction ContactForm() {\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  });\n  const { name, email, message } = formState;\n  function handleChange(e) {\n    if (e.target.name === \"email\") {\n      const isValid = validateEmail(e.target.value);\n      console.log(isValid);\n      // isValid conditional statement\n      if (!isValid) {\n        setErrorMessage(\"Your email is invalid.\");\n      } else {\n        setErrorMessage(\"\");\n      }\n    } else {\n      if (!e.target.value.length) {\n        setErrorMessage(`${e.target.name} is required.`);\n      } else {\n        setErrorMessage(\"\");\n      }\n    }\n    if (!errorMessage) {\n      setFormState({ ...formState, [e.target.name]: e.target.value });\n    }\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(formState);\n  }\n\n  return (\n    <section>\n      <h1 data-testid=\"contact\">Contact me</h1>\n      <form id=\"contact-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            defaultValue={name}\n            onBlur={handleChange}\n            name=\"name\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            type=\"email\"\n            defaultValue={email}\n            name=\"email\"\n            onBlur={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"message\">Message:</label>\n          <textarea\n            name=\"message\"\n            defaultValue={message}\n            rows=\"5\"\n            onBlur={handleChange}\n          />\n          {errorMessage && (\n            <div>\n              <p className=\"error-text\">{errorMessage}</p>\n            </div>\n          )}\n        </div>\n        <button type=\"submit\" data-testid=\"submit\">\n          submit\n        </button>\n      </form>\n    </section>\n  );\n}\n\nexport default ContactForm;\n","export default __webpack_public_path__ + \"static/media/cover-img.0243f37a.png\";","import React from \"react\";\nimport coverImage from \"../../assets/cover/cover-img.png\";\n\nfunction About() {\n  return (\n    <section className=\"my-5\">\n      <h1 id=\"about\">Who am I?</h1>\n      <img\n        src={coverImage}\n        className=\"my-2\"\n        style={{ width: \"100%\" }}\n        alt=\"cover\"\n      />\n      <div className=\"my-2\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\n          bibendum turpis sed ex condimentum molestie. Mauris condimentum lectus\n          ut ornare dignissim. Mauris faucibus urna mi, ac feugiat metus aliquam\n          maximus. Proin aliquam justo nec diam vulputate vestibulum. Aenean\n          sollicitudin nulla at nisi ornare, nec suscipit massa eleifend. Morbi\n          tristique justo vel turpis sollicitudin, et tristique velit convallis.\n          In hac habitasse platea dictumst. Phasellus mattis nunc sed orci\n          consequat laoreet. Praesent id nisl nibh. Curabitur imperdiet\n          ultricies mollis. In hac habitasse platea dictumst.\n        </p>\n      </div>\n    </section>\n  );\n}\n\nexport default About;\n","import React, { useState } from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Project from \"./components/Project\";\nimport ContactForm from \"./components/Contact\";\nimport About from \"./components/About\";\n\nfunction App() {\n  const [contactSelected, setContactSelected] = useState(false);\n  const [directories] = useState([\n    { name: \"test\", description: \"test\" },\n    { name: \"My Work\", description: \"some of my apps and such\" },\n  ]);\n\n  const [currentDirectory, setCurrentDirectory] = useState(directories[0]);\n  return (\n    <div>\n      <h1>IT WORKS!!!</h1>\n      <Navigation\n        directories={directories}\n        setCurrentDirectory={setCurrentDirectory}\n        currentDirectory={currentDirectory}\n        contactSelected={contactSelected}\n        setContactSelected={setContactSelected}\n      ></Navigation>\n      <Header />\n      <main>\n        {!contactSelected ? (\n          <>\n            <Project currentDirectory={currentDirectory}></Project>\n            <About></About>\n          </>\n        ) : (\n          <ContactForm></ContactForm>\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}